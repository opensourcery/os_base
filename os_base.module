<?php
// $Id$
/**
 * @file
 * OpenSourcery base feature and enhancements.
 */
include_once('os_base.features.inc');

/**
 * Implementation of hook_menu_alter().
 * Remove /node, as it might display the "Welcome to your new Drupal website!"
 * message, or a messy, unstyled node listing.
 */
function os_base_menu_alter(&$items) {
  unset($items['node']);
}

/**
 * Implementation of hook_block().
 */
function os_base_block($op = 'view', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $info = array(
        'account' => array('info' => t('OS Base: User account')),
      );
      return $info;
    case 'view':
      module_load_include('inc', 'os_base', 'os_base.block');
      $function = "_os_base_block_{$delta}";
      if (function_exists($function)) {
        drupal_add_js(drupal_get_path('module', 'os_base') .'/os_base.js');
        return call_user_func($function);
      }
      break;
  }

}

/**
 * Implementation of hook_admin_link_alter() (contextual.module).
 */
function os_base_admin_link_alter($links, $type, $object) {
  // Don't show contextual links for the account dropdown
  if ($type == 'block' && $object->module == 'os_base' && $object->delta == 'account') {
    $links = array();
  }
}

/**
 * Implementation of hook_form_alter().
 *
 * - Sets the revisions as enabled for new content types.
 */
function os_base_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'node_type_form':
      if (!isset($form['#node_type']->orig_type)) {
        $options = array();
        // Set to published by default.
        $options[] = 'status';
        // Enable revisions by default.
        $options[] = 'revision';
        $form['workflow']['node_options']['#default_value'] = $options;
      }
      break;

    case 'user_login':
      if (variable_get('os_base_login_redirect', TRUE)) {
        // Set login form to redirect back to the current page.
        $form['#action'] = url($_GET['q'], array('query' => drupal_get_destination(), 'absolute' => TRUE));
      }
      break;
  }

  if (isset($form['type']['#value']) && $form_id == $form['type']['#value'] . '_node_form' && isset($form['revision_information'])) {
    // Hide the revision log input.
    $form['revision_information']['#access'] = FALSE;
  }
}

/**
 * Implementations of hook_date_format_types().
 */
function os_base_date_format_types() {
  return array(
    'day' => t('Day'),
    'time' => t('Time'),
  );
}

/**
 * Implementation of hook_date_formats().
 */
function os_base_date_formats() {
  $condensed = array(
    'day' => array(
      'j F Y',
      'l, M j',
      'l, j M',
      'n/j/Y',
    ),
    'time' => array(
      'g:ia',
      'H:i',
      'g:ia T',
    ),
  );
  $formats = array();
  foreach ($condensed as $type => $f) {
    foreach ($f as $format) {
      $formats[] = array(
        'type' => $type,
        'format' => $format,
        'locales' => array(),
      );
    }
  }
  return $formats;
}

/**
 * Preprocess page variables.
 */
function os_base_preprocess_page(&$vars) {
  if (isset($vars['footer_message'])) {
    // Replace @year with current year.
    $vars['footer_message'] = str_replace('@year', date('Y'), $vars['footer_message']);
  }
}

/**
 * Implementation of hook_theme_registry_alter().
 * Adds our preprocess function for blocks right before zen_process().
 */
function os_base_theme_registry_alter(&$theme_registry) {
  global $theme_key;

  // We don't want to run for the admin theme
  $admin_theme = variable_get('admin_theme', $theme_key);
  if ($theme_key == $admin_theme || !isset($theme_registry['block'])) {
    return;
  }

  $preprocessors = array();
  foreach ($theme_registry['block']['preprocess functions'] as $function) {
    if ($function == 'zen_process') {
      $preprocessors[] = 'os_base_preprocess_block';
    }
    $preprocessors[] = $function;
  }
  $theme_registry['block']['preprocess functions'] = $preprocessors;
}

/**
 * Preprocess Zen blocks: assign "dropdown-block" class to block(s).
 *
 * Hooks invoked:
 * - hook_os_base_dropdown_blocks_alter():
 *   Implementors modify an array that lists which blocks should be given
 *   the dropdown-block class. Example:
 *
 *   hook_os_base_dropdown_blocks_alter(&$dropdown_blocks) {
 *     unset($dropdown_blocks['os_base:account']);
 *     $dropdown_blocks['my_module:my_block_delta'] = TRUE;
 *   }
 *
 */
function os_base_preprocess_block(&$vars) {
  static $determine = TRUE;
  static $dropdown_blocks = array(
    'os_base:account' => TRUE, // module:block delta
  );

  // determine which blocks to use (but just once)
  if ($determine) {
    $determine = FALSE;
    drupal_alter('os_base_dropdown_blocks', $dropdown_blocks);
  }

  // Is the block we're preprocessing a dropdown block?
  $module_block = $vars['block']->module .':'. $vars['block']->delta;
  if (isset($dropdown_blocks[$module_block])) {
    $vars['classes_array'][] = 'dropdown-block';
  }
}
